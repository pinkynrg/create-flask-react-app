name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Building Docker image for frontend
        id: frontend
        env:
          REGISTRY_NAME: ${{ secrets.DOCKER_REGISTRY_NAME }}
          REPOSITORY_NAME: ${{ secrets.PROJECT_NAME }}-frontend
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_HUB_LOGIN_TOKEN: ${{ secrets.DOCKER_HUB_LOGIN_TOKEN }}
        run: |
          docker build -f Dockerfile.frontend -t $REGISTRY_NAME/$REPOSITORY_NAME:$IMAGE_TAG -t $REGISTRY_NAME/$REPOSITORY_NAME:latest .
          echo "Pushing image to Registry..."
          docker login -u $REGISTRY_NAME -p $DOCKERHUB_LOGIN_TOKEN
          docker push $REGISTRY_NAME/$REPOSITORY_NAME:$IMAGE_TAG
          docker push $REGISTRY_NAME/$REPOSITORY_NAME:latest
          echo "::set-output name=image::$REGISTRY_NAME/$REPOSITORY_NAME:$IMAGE_TAG"

      - name: Building Docker image for backend
        id: backend
        env:
          REGISTRY_NAME: ${{ secrets.DOCKER_REGISTRY_NAME }}
          REPOSITORY_NAME: ${{ secrets.PROJECT_NAME }}-backend
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_HUB_LOGIN_TOKEN: ${{ secrets.DOCKER_HUB_LOGIN_TOKEN }}
        run: |
          docker build -f Dockerfile.backend -t $REGISTRY_NAME/$REPOSITORY_NAME:$IMAGE_TAG -t $REGISTRY_NAME/$REPOSITORY_NAME:latest .
          echo "Pushing image to Registry..."
          docker login -u $REGISTRY_NAME -p $DOCKERHUB_LOGIN_TOKEN
          docker push $REGISTRY_NAME/$REPOSITORY_NAME:$IMAGE_TAG
          docker push $REGISTRY_NAME/$REPOSITORY_NAME:latest
          echo "::set-output name=image::$REGISTRY_NAME/$REPOSITORY_NAME:$IMAGE_TAG"
    
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      
      - name: Copy docker-compose.yml into host machine
        uses: actions/checkout@v2

      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.yml"
          target: "~/${{ github.event.repository.name }}"

      - name: Executing Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ github.event.repository.name }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            docker compose down 
            docker image prune -f
            docker compose pull
            docker compose up -d